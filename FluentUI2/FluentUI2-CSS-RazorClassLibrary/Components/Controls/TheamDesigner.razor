

@using System.Text
@using FluentUI2_CSS_Blazor
@inject IJSRuntime JSRuntime
@implements IDisposable



<div style="height:100%; display:flex ;   grid-column-gap: var(--spacingHorizontalXXXL); ">
    <fieldset style="border:0;background-color: var(--colorNeutralBackground3);  width:300px ; display:grid; grid-template-rows: auto 1fr;grid-row-gap:10px" disabled="@(!RendererInfo.IsInteractive || GlobalRenderMode.IsCustomCollor == false)">
        <div class="column"  style="display:flex; flex-direction:column">

            @if(!RendererInfo.IsInteractive || !GlobalRenderMode.IsCustomCollor)
            {
                <p>Select custom Theme to use the Theme Designer</p>
            }
            <label class="LabelPosition.Left">
                Key color Value
                <input type="color" @bind="@Color" />
            </label>
            <InputText @bind-Value="@Color"  />
            <label > Hue Torsion </label>
            <div style="display:flex;grid-column-gap: var(--spacingHorizontalXXXL);">
                <input  type="range" @bind-value="@HueTorsion" min="-50" max="50" />
                <InputNumber  style="width:5em" @bind-Value="@HueTorsion" min="-50" max="50" />

            </div>
            <label> Vibrancy </label>
            <div style="display:flex;grid-column-gap: var(--spacingHorizontalXXXL);">
                <input type="range" @bind-value="@Vibrancy" min="-50" max="50" />
                <InputNumber style="width:5em" @bind-Value="@Vibrancy" min="-100" max="50" />

            </div>
            @*   <button @onclick="ExportCSSProperties" class="ButtonAppearance.Primary">Export</button> *@
        </div>
        <InputTextArea readonly style="height:100%;    font-size: x-small; " @bind-Value="@cssString" />
    </fieldset>

    <div style="display:grid;grid-template-columns:250px 250px 250px;grid-template-rows:auto auto 1fr;grid-column-gap:var(--spacingHorizontalXXXL)">
        <h1>Sticker sheet</h1>
        <p>
            <a href="https://react.fluentui.dev/?path=/docs/theme-theme-designer--docs" target="_blank">See on Web Fluent UI React v9</a> <br/>

            <a href="https://web-components.fluentui.dev/?path=/docs/theme-settheme--docs" target="_blank">See on Web Component v3</a>
        </p>
        <div class="column" >
            <div class="paceholder">
                fui-personal is no native blazor/html component
            </div>
            <span class="tablist">
                <InputRadioGroup  @bind-Value="@valueTabPage">

                    <label><InputRadio  value="1"/>Home</label>
                    <label><InputRadio  value="2"/>Pages</label>
                    <label><InputRadio  value="3"/>Documents</label>

                </InputRadioGroup>
            </span>
            <input type="search" placeholder="Find" />
            <select >
                <option value="" disabled hidden selected>Select</option>
                <option>Action 1</option>
                <option>Action 2</option>
                <option>Action 3</option>
            </select>

        </div>
        <div style="grid-column:2; display:grid;grid-template-rows: auto auto; grid-template-columns: 1fr 1fr; grid-gap:5px">

            <button style="width:70px; height:20px" class="button--appearance-primary">Text</button>
            <div class="paceholder" style="grid-column:2; grid-row:1 ">
                switch is no native blazor/html component
            </div>
            <input  type="range"  style="grid-column:1 / span 2" />
            <label>
                <input type="checkbox" checked/>
                Option 1
            </label>


            <label>
                <input type="radio" checked />
                Option 1
            </label>
            <label>
                <input type="checkbox" />
                Option 2
            </label>
            <label>
                <input type="radio" />
                Option 2
            </label>

        </div>
        <div class="column" style="grid-column:3; display:flex">
            <label>
                Description *

                <input type="text"  />
            </label>
        </div>
    </div>
</div>

@code{
    int valueTabPage =1 ;

    private IJSObjectReference? module;

    //int hueTorsion = 0;
    int HueTorsion
    {
        get { return GlobalRenderMode.CustomTheme.HueTorsion; }
        set { GlobalRenderMode.CustomTheme.HueTorsion = value; calcTheme(); }
    }

    //int vibrancy = 0;
    int Vibrancy
    {
        get { return GlobalRenderMode.CustomTheme.Vibrancy; }
        set { GlobalRenderMode.CustomTheme.Vibrancy = value; calcTheme(); }
    }
    // string _color = "#0F6CBD";
    string Color
    {
        get { return GlobalRenderMode.CustomTheme.Color; }
        set { 
            GlobalRenderMode.CustomTheme.Color = value;
            calcTheme(); 
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            GlobalRenderMode.DataChanged += DataChanged;
        }
        base.OnAfterRender(firstRender);
    }



    void DataChanged(object sender, EventArgs e)
    {
        Console.WriteLine("The threshold was reached.");
        StateHasChanged();
    }
    protected override void OnInitialized()
    {

        if (String.IsNullOrWhiteSpace(cssString) && RendererInfo.Name != "Static" && GlobalRenderMode.IsCustomCollor)
            calcTheme();

    }


    string cssString = "";

    public async void calcTheme()
    {
        cssString = "";
        StringBuilder stringBuilder = new StringBuilder();
        if (module == null)
        {
            // if(RendererInfo.Name == "Server")
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/FluentUI2-CSS-RazorClassLibrary/js/createbrand.js");
            // else
            //    module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/createbrand.js");
        }


        var theme = await module.InvokeAsync<object>("createBrand", Color, HueTorsion/100f, Vibrancy/100f);

        var test = System.Text.Json.JsonSerializer.Deserialize<System.Text.Json.JsonElement>(theme.ToString());
        stringBuilder.Append("html{\n");
        foreach (var property in test.EnumerateObject())
        {
            stringBuilder.Append($"    --{property.Name}: {property.Value};\n");
        }
        // var result = Newtonsoft.Json.Linq.JObject.Parse(theme.ToString());

      
        // foreach (Newtonsoft.Json.Linq.JProperty property in result.Properties())
        // {

        //     stringBuilder.Append($"    --{property.Name}: {property.Value};\n");
        // }
        stringBuilder.Append("}");
        cssString = stringBuilder.ToString();
        StateHasChanged();
    }

    public static async Task LoadCustomTheme(IJSRuntime jSRuntime, string color, int hueTorsion, int vibrancy)
    {
        
        var m = await jSRuntime.InvokeAsync<IJSObjectReference>("import", "./Js/createBrand.js");
        await m.InvokeAsync<object>("createBrand", color, hueTorsion / 100f, vibrancy / 100f);
    }

    public void Dispose()
    {
        // Dispose of unmanaged resources.
        Dispose(true);
        // Suppress finalization.
        GC.SuppressFinalize(this);
    }
    bool _disposed = false;
    protected virtual void Dispose(bool disposing)
    {
        if (_disposed)
        {
            return;
        }

        if (disposing)
        {
            // TODO: dispose managed state (managed objects).
            GlobalRenderMode.DataChanged -= DataChanged;
        }

        // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.
        // TODO: set large fields to null.

        _disposed = true;
    }
}
