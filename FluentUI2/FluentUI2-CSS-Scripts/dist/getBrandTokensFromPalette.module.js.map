{
  "version": 3,
  "sources": ["../src/colors/csswg.ts", "../src/colors/geometry.ts", "../src/colors/hueMap.ts", "../src/colors/palettes.ts", "../src/getBrandTokensFromPalette.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/naming-convention */\n// The following is a combination of several files retrieved from CSSWG\u2019s\n// CSS Color 4 module. It was modified to support TypeScript types adapted for\n// the Fluent Blocks `colors` package and formatted to meet its style criteria.\nimport { Vec2, Vec3, Vec4 } from './types';\n\n// [willshown]: Adjusted to export a TypeScript module. Retrieved on 24 May 2021\n// from https://drafts.csswg.org/css-color-4/multiply-matrices.js\n\n/**\n * Simple matrix (and vector) multiplication\n * Warning: No error handling for incompatible dimensions!\n * @author Lea Verou 2020 MIT License\n */\n\ntype MatrixIO = number[][] | number[];\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isFlat(A: any): A is number[] {\n  return !Array.isArray(A[0]);\n}\n\n// A is m x n. B is n x p. product is m x p.\nexport default function multiplyMatrices(AMatrixOrVector: MatrixIO, BMatrixOrVector: MatrixIO): MatrixIO {\n  const m = AMatrixOrVector.length;\n\n  const A: number[][] = isFlat(AMatrixOrVector)\n    ? // A is vector, convert to [[a, b, c, ...]]\n      [AMatrixOrVector]\n    : AMatrixOrVector;\n\n  const B: number[][] = isFlat(BMatrixOrVector)\n    ? // B is vector, convert to [[a], [b], [c], ...]]\n      BMatrixOrVector.map(x => [x])\n    : BMatrixOrVector;\n\n  const p = B[0].length;\n  const B_cols = B[0].map((_, i) => B.map(x => x[i])); // transpose B\n  let product: MatrixIO = A.map(row =>\n    B_cols.map(col => {\n      if (!Array.isArray(row)) {\n        return col.reduce((a, c) => a + c * row, 0);\n      }\n\n      return row.reduce((a, c, i) => a + c * (col[i] || 0), 0);\n    }),\n  );\n\n  if (m === 1) {\n    product = product[0]; // Avoid [[a, b, c, ...]]\n  }\n\n  if (p === 1) {\n    return (product as number[][]).map(x => x[0]); // Avoid [[a], [b], [c], ...]]\n  }\n\n  return product;\n}\n\n// Sample code for color conversions\n// Conversion can also be done using ICC profiles and a Color Management System\n// For clarity, a library is used for matrix multiplication (multiply-matrices.js)\n\n// [willshown]: Adjusted to export a TypeScript module. Retrieved on 24 May 2021\n// from https://drafts.csswg.org/css-color-4/conversions.js\n\n// sRGB-related functions\n\nexport function lin_sRGB(RGB: Vec3) {\n  // convert an array of sRGB values\n  // where in-gamut values are in the range [0 - 1]\n  // to linear light (un-companded) form.\n  // https://en.wikipedia.org/wiki/SRGB\n  // Extended transfer function:\n  // for negative values,  linear portion is extended on reflection of axis,\n  // then reflected power function is used.\n  return RGB.map(val => {\n    const sign = val < 0 ? -1 : 1;\n    const abs = Math.abs(val);\n\n    if (abs < 0.04045) {\n      return val / 12.92;\n    }\n\n    return sign * Math.pow((abs + 0.055) / 1.055, 2.4);\n  }) as Vec3;\n}\n\nexport function gam_sRGB(RGB: Vec3) {\n  // convert an array of linear-light sRGB values in the range 0.0-1.0\n  // to gamma corrected form\n  // https://en.wikipedia.org/wiki/SRGB\n  // Extended transfer function:\n  // For negative values, linear portion extends on reflection\n  // of axis, then uses reflected pow below that\n  return RGB.map(val => {\n    const sign = val < 0 ? -1 : 1;\n    const abs = Math.abs(val);\n\n    if (abs > 0.0031308) {\n      return sign * (1.055 * Math.pow(abs, 1 / 2.4) - 0.055);\n    }\n\n    return 12.92 * val;\n  }) as Vec3;\n}\n\nexport function lin_sRGB_to_XYZ(rgb: Vec3) {\n  // convert an array of linear-light sRGB values to CIE XYZ\n  // using sRGB's own white, D65 (no chromatic adaptation)\n\n  const M = [\n    [0.41239079926595934, 0.357584339383878, 0.1804807884018343],\n    [0.21263900587151027, 0.715168678767756, 0.07219231536073371],\n    [0.01933081871559182, 0.11919477979462598, 0.9505321522496607],\n  ];\n  return multiplyMatrices(M, rgb) as Vec3;\n}\n\nexport function XYZ_to_lin_sRGB(XYZ: Vec3) {\n  // convert XYZ to linear-light sRGB\n\n  const M = [\n    [3.2409699419045226, -1.537383177570094, -0.4986107602930034],\n    [-0.9692436362808796, 1.8759675015077202, 0.04155505740717559],\n    [0.05563007969699366, -0.20397695888897652, 1.0569715142428786],\n  ];\n\n  return multiplyMatrices(M, XYZ) as Vec3;\n}\n\n//  display-p3-related functions\n\nexport function lin_P3(RGB: Vec3) {\n  // convert an array of display-p3 RGB values in the range 0.0 - 1.0\n  // to linear light (un-companded) form.\n\n  return lin_sRGB(RGB) as Vec3; // same as sRGB\n}\n\nexport function gam_P3(RGB: Vec3) {\n  // convert an array of linear-light display-p3 RGB  in the range 0.0-1.0\n  // to gamma corrected form\n\n  return gam_sRGB(RGB) as Vec3; // same as sRGB\n}\n\nexport function lin_P3_to_XYZ(rgb: Vec3) {\n  // convert an array of linear-light display-p3 values to CIE XYZ\n  // using  D65 (no chromatic adaptation)\n  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n  const M = [\n    [0.4865709486482162, 0.26566769316909306, 0.1982172852343625],\n    [0.2289745640697488, 0.6917385218365064, 0.079286914093745],\n    [0.0, 0.04511338185890264, 1.043944368900976],\n  ];\n  // 0 was computed as -3.972075516933488e-17\n\n  return multiplyMatrices(M, rgb) as Vec3;\n}\n\nexport function XYZ_to_lin_P3(XYZ: Vec3) {\n  // convert XYZ to linear-light P3\n  const M = [\n    [2.493496911941425, -0.9313836179191239, -0.40271078445071684],\n    [-0.8294889695615747, 1.7626640603183463, 0.023624685841943577],\n    [0.03584583024378447, -0.07617238926804182, 0.9568845240076872],\n  ];\n\n  return multiplyMatrices(M, XYZ) as Vec3;\n}\n\n// prophoto-rgb functions\n\nexport function lin_ProPhoto(RGB: Vec3) {\n  // convert an array of prophoto-rgb values\n  // where in-gamut colors are in the range [0.0 - 1.0]\n  // to linear light (un-companded) form.\n  // Transfer curve is gamma 1.8 with a small linear portion\n  // Extended transfer function\n  const Et2 = 16 / 512;\n  return RGB.map(val => {\n    const sign = val < 0 ? -1 : 1;\n    const abs = Math.abs(val);\n\n    if (abs <= Et2) {\n      return val / 16;\n    }\n\n    return sign * Math.pow(val, 1.8);\n  }) as Vec3;\n}\n\nexport function gam_ProPhoto(RGB: Vec3) {\n  // convert an array of linear-light prophoto-rgb  in the range 0.0-1.0\n  // to gamma corrected form\n  // Transfer curve is gamma 1.8 with a small linear portion\n  // TODO for negative values, extend linear portion on reflection of axis, then add pow below that\n  const Et = 1 / 512;\n  return RGB.map(val => {\n    const sign = val < 0 ? -1 : 1;\n    const abs = Math.abs(val);\n\n    if (abs >= Et) {\n      return sign * Math.pow(abs, 1 / 1.8);\n    }\n\n    return 16 * val;\n  }) as Vec3;\n}\n\nexport function lin_ProPhoto_to_XYZ(rgb: Vec3) {\n  // convert an array of linear-light prophoto-rgb values to CIE XYZ\n  // using  D50 (so no chromatic adaptation needed afterwards)\n  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n  const M = [\n    [0.7977604896723027, 0.13518583717574031, 0.0313493495815248],\n    [0.2880711282292934, 0.7118432178101014, 0.00008565396060525902],\n    [0.0, 0.0, 0.8251046025104601],\n  ];\n\n  return multiplyMatrices(M, rgb) as Vec3;\n}\n\nexport function XYZ_to_lin_ProPhoto(XYZ: Vec3) {\n  // convert XYZ to linear-light prophoto-rgb\n  const M = [\n    [1.3457989731028281, -0.25558010007997534, -0.05110628506753401],\n    [-0.5446224939028347, 1.5082327413132781, 0.02053603239147973],\n    [0.0, 0.0, 1.2119675456389454],\n  ];\n\n  return multiplyMatrices(M, XYZ) as Vec3;\n}\n\n// a98-rgb functions\n\nexport function lin_a98rgb(RGB: Vec3) {\n  // convert an array of a98-rgb values in the range 0.0 - 1.0\n  // to linear light (un-companded) form.\n  // negative values are also now accepted\n  return RGB.map(val => {\n    const sign = val < 0 ? -1 : 1;\n    const abs = Math.abs(val);\n\n    return sign * Math.pow(abs, 563 / 256);\n  }) as Vec3;\n}\n\nexport function gam_a98rgb(RGB: Vec3) {\n  // convert an array of linear-light a98-rgb  in the range 0.0-1.0\n  // to gamma corrected form\n  // negative values are also now accepted\n  return RGB.map(val => {\n    const sign = val < 0 ? -1 : 1;\n    const abs = Math.abs(val);\n\n    return sign * Math.pow(abs, 256 / 563);\n  }) as Vec3;\n}\n\nexport function lin_a98rgb_to_XYZ(rgb: Vec3) {\n  // convert an array of linear-light a98-rgb values to CIE XYZ\n  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n  // has greater numerical precision than section 4.3.5.3 of\n  // https://www.adobe.com/digitalimag/pdfs/AdobeRGB1998.pdf\n  // but the values below were calculated from first principles\n  // from the chromaticity coordinates of R G B W\n  // see matrixmaker.html\n  const M = [\n    [0.5766690429101305, 0.1855582379065463, 0.1882286462349947],\n    [0.29734497525053605, 0.6273635662554661, 0.07529145849399788],\n    [0.02703136138641234, 0.07068885253582723, 0.9913375368376388],\n  ];\n\n  return multiplyMatrices(M, rgb) as Vec3;\n}\n\nexport function XYZ_to_lin_a98rgb(XYZ: Vec3) {\n  // convert XYZ to linear-light a98-rgb\n  const M = [\n    [2.0415879038107465, -0.5650069742788596, -0.34473135077832956],\n    [-0.9692436362808795, 1.8759675015077202, 0.04155505740717557],\n    [0.013444280632031142, -0.11836239223101838, 1.0151749943912054],\n  ];\n\n  return multiplyMatrices(M, XYZ) as Vec3;\n}\n\n// Rec. 2020-related functions\n\nexport function lin_2020(RGB: Vec3) {\n  // convert an array of rec2020 RGB values in the range 0.0 - 1.0\n  // to linear light (un-companded) form.\n  // ITU-R BT.2020-2 p.4\n\n  const \u03B1 = 1.09929682680944;\n  const \u03B2 = 0.018053968510807;\n\n  return RGB.map(val => {\n    const sign = val < 0 ? -1 : 1;\n    const abs = Math.abs(val);\n\n    if (abs < \u03B2 * 4.5) {\n      return val / 4.5;\n    }\n\n    return sign * Math.pow((abs + \u03B1 - 1) / \u03B1, 1 / 0.45);\n  }) as Vec3;\n}\n\nexport function gam_2020(RGB: Vec3) {\n  // convert an array of linear-light rec2020 RGB  in the range 0.0-1.0\n  // to gamma corrected form\n  // ITU-R BT.2020-2 p.4\n\n  const \u03B1 = 1.09929682680944;\n  const \u03B2 = 0.018053968510807;\n\n  return RGB.map(val => {\n    const sign = val < 0 ? -1 : 1;\n    const abs = Math.abs(val);\n\n    if (abs > \u03B2) {\n      return sign * (\u03B1 * Math.pow(abs, 0.45) - (\u03B1 - 1));\n    }\n\n    return 4.5 * val;\n  }) as Vec3;\n}\n\nexport function lin_2020_to_XYZ(rgb: Vec3) {\n  // convert an array of linear-light rec2020 values to CIE XYZ\n  // using  D65 (no chromatic adaptation)\n  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n  const M = [\n    [0.6369580483012914, 0.14461690358620832, 0.1688809751641721],\n    [0.2627002120112671, 0.6779980715188708, 0.05930171646986196],\n    [0.0, 0.028072693049087428, 1.060985057710791],\n  ];\n  // 0 is actually calculated as  4.994106574466076e-17\n\n  return multiplyMatrices(M, rgb) as Vec3;\n}\n\nexport function XYZ_to_lin_2020(XYZ: Vec3) {\n  // convert XYZ to linear-light rec2020\n  const M = [\n    [1.7166511879712674, -0.35567078377639233, -0.25336628137365974],\n    [-0.6666843518324892, 1.6164812366349395, 0.01576854581391113],\n    [0.017639857445310783, -0.042770613257808524, 0.9421031212354738],\n  ];\n\n  return multiplyMatrices(M, XYZ) as Vec3;\n}\n\n// Chromatic adaptation\n\nexport function D65_to_D50(XYZ: Vec3) {\n  // Bradford chromatic adaptation from D65 to D50\n  // The matrix below is the result of three operations:\n  // - convert from XYZ to retinal cone domain\n  // - scale components from one reference white to another\n  // - convert back to XYZ\n  // http://www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html\n  const M = [\n    [1.0479298208405488, 0.022946793341019088, -0.05019222954313557],\n    [0.029627815688159344, 0.990434484573249, -0.01707382502938514],\n    [-0.009243058152591178, 0.015055144896577895, 0.7518742899580008],\n  ];\n\n  return multiplyMatrices(M, XYZ) as Vec3;\n}\n\nexport function D50_to_D65(XYZ: Vec3) {\n  // Bradford chromatic adaptation from D50 to D65\n  const M = [\n    [0.9554734527042182, -0.023098536874261423, 0.0632593086610217],\n    [-0.028369706963208136, 1.0099954580058226, 0.021041398966943008],\n    [0.012314001688319899, -0.020507696433477912, 1.3303659366080753],\n  ];\n\n  return multiplyMatrices(M, XYZ) as Vec3;\n}\n\n// Lab and LCH\n\nexport function XYZ_to_Lab(XYZ: Vec3) {\n  // Assuming XYZ is relative to D50, convert to CIE Lab\n  // from CIE standard, which now defines these as a rational fraction\n  const \u03B5 = 216 / 24389; // 6^3/29^3\n  const \u03BA = 24389 / 27; // 29^3/3^3\n  const white = [0.96422, 1.0, 0.82521]; // D50 reference white\n\n  // compute xyz, which is XYZ scaled relative to reference white\n  const xyz = XYZ.map((value, i) => value / white[i]);\n\n  // now compute f\n  const f = xyz.map(value => (value > \u03B5 ? Math.cbrt(value) : (\u03BA * value + 16) / 116));\n\n  return [\n    116 * f[1] - 16, // L\n    500 * (f[0] - f[1]), // a\n    200 * (f[1] - f[2]), // b\n  ] as Vec3;\n}\n\nexport function Lab_to_XYZ(Lab: Vec3) {\n  // Convert Lab to D50-adapted XYZ\n  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n  const \u03BA = 24389 / 27; // 29^3/3^3\n  const \u03B5 = 216 / 24389; // 6^3/29^3\n  const white = [0.96422, 1.0, 0.82521]; // D50 reference white\n  const f = [];\n\n  // compute f, starting with the luminance-related term\n  f[1] = (Lab[0] + 16) / 116;\n  f[0] = Lab[1] / 500 + f[1];\n  f[2] = f[1] - Lab[2] / 200;\n\n  // compute xyz\n  const xyz = [\n    Math.pow(f[0], 3) > \u03B5 ? Math.pow(f[0], 3) : (116 * f[0] - 16) / \u03BA,\n    Lab[0] > \u03BA * \u03B5 ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / \u03BA,\n    Math.pow(f[2], 3) > \u03B5 ? Math.pow(f[2], 3) : (116 * f[2] - 16) / \u03BA,\n  ];\n\n  // Compute XYZ by scaling xyz by reference white\n  return xyz.map((value, i) => value * white[i]) as Vec3;\n}\n\nexport function Lab_to_LCH(Lab: Vec3) {\n  // Convert to polar form\n  const hue = (Math.atan2(Lab[2], Lab[1]) * 180) / Math.PI;\n  return [\n    Lab[0], // L is still L\n    Math.sqrt(Math.pow(Lab[1], 2) + Math.pow(Lab[2], 2)), // Chroma\n    hue >= 0 ? hue : hue + 360, // Hue, in degrees [0 to 360)\n  ] as Vec3;\n}\n\nexport function LCH_to_Lab(LCH: Vec3) {\n  // Convert from polar form\n  return [\n    LCH[0], // L is still L\n    LCH[1] * Math.cos((LCH[2] * Math.PI) / 180), // a\n    LCH[1] * Math.sin((LCH[2] * Math.PI) / 180), // b\n  ] as Vec3;\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 1] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   rgb      The red, green, and blue color values\n * @return  Array    The HSV representation\n */\nexport function rgbToHsv(rgb: Vec3) {\n  const [r, g, b] = rgb;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h: number;\n  const v = max;\n\n  const d = max - min;\n  const s = max === 0 ? 0 : d / max;\n\n  if (max === min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h = h! / 6;\n  }\n\n  return [h, s, v] as Vec3;\n}\n\n// utility functions for color conversions\n\n// [willshown]: Adjusted to export a TypeScript module.\n// Retrieved on 24 May 2021 from https://drafts.csswg.org/css-color-4/utilities.js\n\nexport function sRGB_to_luminance(RGB: Vec3) {\n  // convert an array of gamma-corrected sRGB values\n  // in the 0.0 to 1.0 range\n  // to linear-light sRGB, then to CIE XYZ\n  // and return luminance (the Y value)\n\n  const XYZ = lin_sRGB_to_XYZ(lin_sRGB(RGB));\n  return XYZ[1];\n}\n\nexport function contrast(RGB1: Vec3, RGB2: Vec3) {\n  // return WCAG 2.1 contrast ratio\n  // https://www.w3.org/TR/WCAG21/#dfn-contrast-ratio\n  // for two sRGB values\n  // given as arrays of 0.0 to 1.0\n\n  const L1 = sRGB_to_luminance(RGB1);\n  const L2 = sRGB_to_luminance(RGB2);\n\n  if (L1 > L2) {\n    return (L1 + 0.05) / (L2 + 0.05);\n  }\n\n  return (L2 + 0.05) / (L1 + 0.05);\n}\n\nexport function sRGB_to_LCH(RGB: Vec3) {\n  // convert an array of gamma-corrected sRGB values\n  // in the 0.0 to 1.0 range\n  // to linear-light sRGB, then to CIE XYZ,\n  // then adapt from D65 to D50,\n  // then convert XYZ to CIE Lab\n  // and finally, convert to CIE LCH\n\n  return Lab_to_LCH(XYZ_to_Lab(D65_to_D50(lin_sRGB_to_XYZ(lin_sRGB(RGB)))));\n}\n\nexport function sRGB_to_LAB(RGB: Vec3) {\n  // convert an array of gamma-corrected sRGB values\n  // in the 0.0 to 1.0 range\n  // to linear-light sRGB, then to CIE XYZ,\n  // then adapt from D65 to D50,\n  // then convert XYZ to CIE Lab\n\n  return XYZ_to_Lab(D65_to_D50(lin_sRGB_to_XYZ(lin_sRGB(RGB))));\n}\n\nexport function P3_to_LCH(RGB: Vec3) {\n  // convert an array of gamma-corrected display-p3 values\n  // in the 0.0 to 1.0 range\n  // to linear-light display-p3, then to CIE XYZ,\n  // then adapt from D65 to D50,\n  // then convert XYZ to CIE Lab\n  // and finally, convert to CIE LCH\n\n  return Lab_to_LCH(XYZ_to_Lab(D65_to_D50(lin_P3_to_XYZ(lin_P3(RGB)))));\n}\n\nexport function r2020_to_LCH(RGB: Vec3) {\n  // convert an array of gamma-corrected rec.2020 values\n  // in the 0.0 to 1.0 range\n  // to linear-light sRGB, then to CIE XYZ,\n  // then adapt from D65 to D50,\n  // then convert XYZ to CIE Lab\n  // and finally, convert to CIE LCH\n\n  return Lab_to_LCH(XYZ_to_Lab(D65_to_D50(lin_2020_to_XYZ(lin_2020(RGB)))));\n}\n\nexport function LCH_to_sRGB(LCH: Vec3) {\n  // convert an array of CIE LCH values\n  // to CIE Lab, and then to XYZ,\n  // adapt from D50 to D65,\n  // then convert XYZ to linear-light sRGB\n  // and finally to gamma corrected sRGB\n  // for in-gamut colors, components are in the 0.0 to 1.0 range\n  // out of gamut colors may have negative components\n  // or components greater than 1.0\n  // so check for that :)\n\n  return gam_sRGB(XYZ_to_lin_sRGB(D50_to_D65(Lab_to_XYZ(LCH_to_Lab(LCH)))));\n}\n\nexport function LAB_to_sRGB(LAB: Vec3) {\n  // convert an array of CIE Lab values to XYZ,\n  // adapt from D50 to D65,\n  // then convert XYZ to linear-light sRGB\n  // and finally to gamma corrected sRGB\n  // for in-gamut colors, components are in the 0.0 to 1.0 range\n  // out of gamut colors may have negative components\n  // or components greater than 1.0\n  // so check for that :)\n\n  return gam_sRGB(XYZ_to_lin_sRGB(D50_to_D65(Lab_to_XYZ(LAB))));\n}\n\nexport function LCH_to_P3(LCH: Vec3) {\n  // convert an array of CIE LCH values\n  // to CIE Lab, and then to XYZ,\n  // adapt from D50 to D65,\n  // then convert XYZ to linear-light display-p3\n  // and finally to gamma corrected display-p3\n  // for in-gamut colors, components are in the 0.0 to 1.0 range\n  // out of gamut colors may have negative components\n  // or components greater than 1.0\n  // so check for that :)\n\n  return gam_P3(XYZ_to_lin_P3(D50_to_D65(Lab_to_XYZ(LCH_to_Lab(LCH)))));\n}\n\nexport function LCH_to_r2020(LCH: Vec3) {\n  // convert an array of CIE LCH values\n  // to CIE Lab, and then to XYZ,\n  // adapt from D50 to D65,\n  // then convert XYZ to linear-light rec.2020\n  // and finally to gamma corrected rec.2020\n  // for in-gamut colors, components are in the 0.0 to 1.0 range\n  // out of gamut colors may have negative components\n  // or components greater than 1.0\n  // so check for that :)\n\n  return gam_2020(XYZ_to_lin_2020(D50_to_D65(Lab_to_XYZ(LCH_to_Lab(LCH)))));\n}\n\n// this is straight from the CSS Color 4 spec\n\nexport function hslToRgb(hue: number, sat: number, light: number) {\n  // \tFor simplicity, this algorithm assumes that the hue has been normalized\n  //  to a number in the half-open range [0, 6), and the saturation and lightness\n  //  have been normalized to the range [0, 1]. It returns an array of three numbers\n  //  representing the red, green, and blue channels of the colors,\n  //  normalized to the range [0, 1]\n  const t2 = light <= 0.5 ? light * (sat + 1) : light + sat - light * sat;\n  const t1 = light * 2 - t2;\n  const r = hueToChannel(t1, t2, hue + 2);\n  const g = hueToChannel(t1, t2, hue);\n  const b = hueToChannel(t1, t2, hue - 2);\n  return [r, g, b] as Vec3;\n}\n\nexport function hueToChannel(t1: number, t2: number, hue: number): number {\n  if (hue < 0) {\n    hue += 6;\n  }\n  if (hue >= 6) {\n    hue -= 6;\n  }\n\n  if (hue < 1) {\n    return (t2 - t1) * hue + t1;\n  } else if (hue < 3) {\n    return t2;\n  } else if (hue < 4) {\n    return (t2 - t1) * (4 - hue) + t1;\n  } else {\n    return t1;\n  }\n}\n\n// These are the naive algorithms from CS Color 4\n\nexport function naive_CMYK_to_sRGB(CMYK: Vec4) {\n  // CMYK is an array of four values\n  // in the range [0.0, 1.0]\n  // the optput is an array of [RGB]\n  // also in the [0.0, 1.0] range\n  // because the naive algorithm does not generate out of gamut colors\n  // neither does it generate accurate simulations of practical CMYK colors\n\n  const cyan = CMYK[0];\n  const magenta = CMYK[1];\n  const yellow = CMYK[2];\n  const black = CMYK[3];\n\n  const red = 1 - Math.min(1, cyan * (1 - black) + black);\n  const green = 1 - Math.min(1, magenta * (1 - black) + black);\n  const blue = 1 - Math.min(1, yellow * (1 - black) + black);\n\n  return [red, green, blue] as Vec3;\n}\n\nexport function naive_sRGB_to_CMYK(RGB: Vec3) {\n  // RGB is an arravy of three values\n  // in the range [0.0, 1.0]\n  // the output is an array of [CMYK]\n  // also in the [0.0, 1.0] range\n  // with maximum GCR and (I think) 200% TAC\n  // the naive algorithm does not generate out of gamut colors\n  // neither does it generate accurate simulations of practical CMYK colors\n\n  const red = RGB[0];\n  const green = RGB[1];\n  const blue = RGB[2];\n\n  const black = 1 - Math.max(red, green, blue);\n  const cyan = black === 1.0 ? 0 : (1 - red - black) / (1 - black);\n  const magenta = black === 1.0 ? 0 : (1 - green - black) / (1 - black);\n  const yellow = black === 1.0 ? 0 : (1 - blue - black) / (1 - black);\n\n  return [cyan, magenta, yellow, black] as Vec4;\n}\n\n// Chromaticity utilities\n\nexport function XYZ_to_xy(XYZ: Vec3) {\n  // Convert an array of three XYZ values\n  // to x,y chromaticity coordinates\n\n  const X = XYZ[0];\n  const Y = XYZ[1];\n  const Z = XYZ[2];\n  const sum = X + Y + Z;\n  return [X / sum, Y / sum] as Vec2;\n}\n\nexport function xy_to_uv(xy: Vec2) {\n  // convert an x,y chromaticity pair\n  // to u*,v* chromaticities\n\n  const x = xy[0];\n  const y = xy[1];\n  const denom = -2 * x + 12 * y + 3;\n  return [(4 * x) / denom, (9 * y) / denom] as Vec2;\n}\n\nexport function XYZ_to_uv(XYZ: Vec3) {\n  // Convert an array of three XYZ values\n  // to u*,v* chromaticity coordinates\n\n  const X = XYZ[0];\n  const Y = XYZ[1];\n  const Z = XYZ[2];\n  const denom = X + 15 * Y + 3 * Z;\n  return [(4 * X) / denom, (9 * Y) / denom] as Vec2;\n}\n\n// [willshown]: Truncated to export only relevant functions and adjusted to export a TypeScript\n// module, some additional adjustments to remove alpha support. Retrieved on 24 May 2021\n// from https://raw.githubusercontent.com/LeaVerou/css.land/master/lch/lch.js\n\nfunction is_LCH_inside_sRGB(l: number, c: number, h: number): boolean {\n  const \u03B5 = 0.000005;\n  const rgb = LCH_to_sRGB([+l, +c, +h]);\n  return rgb.reduce((a: boolean, b: number) => a && b >= 0 - \u03B5 && b <= 1 + \u03B5, true);\n}\n\nexport function snap_into_gamut(Lab: Vec3): Vec3 {\n  // Moves an LCH color into the sRGB gamut\n  // by holding the l and h steady,\n  // and adjusting the c via binary-search\n  // until the color is on the sRGB boundary.\n\n  // .0001 chosen fairly arbitrarily as \"close enough\"\n  const \u03B5 = 0.0001;\n\n  const LCH = Lab_to_LCH(Lab);\n  const l = LCH[0];\n  let c = LCH[1];\n  const h = LCH[2];\n\n  if (is_LCH_inside_sRGB(l, c, h)) {\n    return Lab;\n  }\n\n  let hiC = c;\n  let loC = 0;\n  c /= 2;\n\n  while (hiC - loC > \u03B5) {\n    if (is_LCH_inside_sRGB(l, c, h)) {\n      loC = c;\n    } else {\n      hiC = c;\n    }\n    c = (hiC + loC) / 2;\n  }\n\n  return LCH_to_Lab([l, c, h]);\n}\n", "/* eslint-disable @typescript-eslint/naming-convention */\nimport { Curve, CurvePath, Vec3 } from './types';\n\nconst curveResolution = 128;\n\n// Many of these functions are ported from ThreeJS, which is distributed under\n// the MIT license. Retrieved from https://github.com/mrdoob/three.js on\n// 14 October 2021.\n\nfunction distanceTo(v1: Vec3, v2: Vec3) {\n  return Math.sqrt(distanceToSquared(v1, v2));\n}\n\nfunction distanceToSquared(v1: Vec3, v2: Vec3) {\n  const dx = v1[0] - v2[0];\n  const dy = v1[1] - v2[1];\n  const dz = v1[2] - v2[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\nfunction equals(v1: Vec3, v2: Vec3) {\n  return v1[0] === v2[0] && v1[1] === v2[1] && v1[2] === v2[2];\n}\n\nfunction QuadraticBezierP0(t: number, p: number): number {\n  const k = 1 - t;\n  return k * k * p;\n}\n\nfunction QuadraticBezierP1(t: number, p: number): number {\n  return 2 * (1 - t) * t * p;\n}\n\nfunction QuadraticBezierP2(t: number, p: number): number {\n  return t * t * p;\n}\n\nfunction QuadraticBezier(t: number, p0: number, p1: number, p2: number): number {\n  return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n}\n\nfunction getPointOnCurve(curve: Curve, t: number) {\n  const [v0, v1, v2] = curve.points;\n  return [\n    QuadraticBezier(t, v0[0], v1[0], v2[0]),\n    QuadraticBezier(t, v0[1], v1[1], v2[1]),\n    QuadraticBezier(t, v0[2], v1[2], v2[2]),\n  ] as Vec3;\n}\n\nfunction getPointsOnCurve(curve: Curve, divisions: number): Vec3[] {\n  const points = [];\n  for (let d = 0; d <= divisions; d++) {\n    points.push(getPointOnCurve(curve, d / divisions));\n  }\n  return points;\n}\n\nfunction getCurvePathLength(curvePath: CurvePath) {\n  const lengths = getCurvePathLengths(curvePath);\n  return lengths[lengths.length - 1];\n}\n\nfunction getCurvePathLengths(curvePath: CurvePath) {\n  if (curvePath.cacheLengths && curvePath.cacheLengths.length === curvePath.curves.length) {\n    return curvePath.cacheLengths;\n  }\n  // Get length of sub-curve\n  // Push sums into cached array\n  const lengths = [];\n  let sums = 0;\n  for (let i = 0, l = curvePath.curves.length; i < l; i++) {\n    sums += getCurveLength(curvePath.curves[i]);\n    lengths.push(sums);\n  }\n  curvePath.cacheLengths = lengths;\n  return lengths;\n}\n\nfunction getCurveLength(curve: Curve) {\n  const lengths = getCurveLengths(curve);\n  return lengths[lengths.length - 1];\n}\n\nfunction getCurveLengths(curve: Curve, divisions = curveResolution) {\n  if (curve.cacheArcLengths && curve.cacheArcLengths.length === divisions + 1) {\n    return curve.cacheArcLengths;\n  }\n\n  const cache = [];\n  let current;\n  let last = getPointOnCurve(curve, 0);\n  let sum = 0;\n\n  cache.push(0);\n\n  for (let p = 1; p <= divisions; p++) {\n    current = getPointOnCurve(curve, p / divisions);\n    sum += distanceTo(current, last);\n    cache.push(sum);\n    last = current;\n  }\n\n  curve.cacheArcLengths = cache;\n\n  return cache; // { sums: cache, sum: sum }; Sum is in the last element.\n}\n\nfunction getCurveUtoTMapping(curve: Curve, u: number, distance?: number) {\n  const arcLengths = getCurveLengths(curve);\n  let i = 0;\n  const il = arcLengths.length;\n  let targetArcLength; // The targeted u distance value to get\n\n  if (distance) {\n    targetArcLength = distance;\n  } else {\n    targetArcLength = u * arcLengths[il - 1];\n  }\n\n  // binary search for the index with largest value smaller than target u distance\n\n  let low = 0;\n  let high = il - 1;\n  let comparison;\n\n  while (low <= high) {\n    i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n    comparison = arcLengths[i] - targetArcLength;\n\n    if (comparison < 0) {\n      low = i + 1;\n    } else if (comparison > 0) {\n      high = i - 1;\n    } else {\n      high = i;\n      break;\n    }\n  }\n\n  i = high;\n\n  if (arcLengths[i] === targetArcLength) {\n    return i / (il - 1);\n  }\n\n  // we could get finer grain at lengths, or use simple interpolation between two points\n  const lengthBefore = arcLengths[i];\n  const lengthAfter = arcLengths[i + 1];\n\n  const segmentLength = lengthAfter - lengthBefore;\n\n  // determine where we are between the 'before' and 'after' points\n  const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;\n\n  // add that fractional amount to t\n  const t = (i + segmentFraction) / (il - 1);\n\n  return t;\n}\n\nfunction getPointOnCurveAt(curve: Curve, u: number) {\n  return getPointOnCurve(curve, getCurveUtoTMapping(curve, u));\n}\n\nexport function getPointOnCurvePath(curvePath: CurvePath, t: number): Vec3 | null {\n  const d = t * getCurvePathLength(curvePath);\n  const curveLengths = getCurvePathLengths(curvePath);\n  let i = 0;\n\n  while (i < curveLengths.length) {\n    if (curveLengths[i] >= d) {\n      const diff = curveLengths[i] - d;\n      const curve = curvePath.curves[i];\n\n      const segmentLength = getCurveLength(curve);\n      const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n      return getPointOnCurveAt(curve, u);\n    }\n    i++;\n  }\n  return null;\n}\n\nexport function getPointsOnCurvePath(curvePath: CurvePath, divisions = curveResolution): Vec3[] {\n  const points = [];\n  let last;\n\n  for (let i = 0, curves = curvePath.curves; i < curves.length; i++) {\n    const curve = curves[i];\n    const pts = getPointsOnCurve(curve, divisions);\n\n    for (const point of pts) {\n      if (last && equals(last, point)) {\n        // ensures no consecutive points are duplicates\n        continue;\n      }\n\n      points.push(point);\n      last = point;\n    }\n  }\n\n  return points;\n}\n", "export function hexToHue(hexColor: string) {\n  // Parse the hex color string into its red, green, and blue components\n  const red = parseInt(hexColor.substring(1, 3), 16);\n  const green = parseInt(hexColor.substring(3, 5), 16);\n  const blue = parseInt(hexColor.substring(5, 7), 16);\n\n  // Convert the RGB color to HSL color space\n  const r = red / 255;\n  const g = green / 255;\n  const b = blue / 255;\n  const cmax = Math.max(r, g, b);\n  const cmin = Math.min(r, g, b);\n  const delta = cmax - cmin;\n  let hue;\n\n  // Calculate the hue value based on the RGB color values\n  if (delta === 0) {\n    hue = 0;\n  } else if (cmax === r) {\n    hue = ((g - b) / delta) % 6;\n  } else if (cmax === g) {\n    hue = (b - r) / delta + 2;\n  } else {\n    hue = (r - g) / delta + 4;\n  }\n\n  // Convert the hue value to degrees and return it\n  hue = Math.round(hue * 60);\n  if (hue < 0) {\n    hue += 360;\n  }\n  return hue;\n}\n\n// map of hue to [min, center, max], generated from Arman\nexport const hueToSnappingPointsMap = [\n  [0.0085504, 0.148504, 0.858504],\n  [0.00855388, 0.1485388, 0.8585388],\n  [0.0085582, 0.148582, 0.858582],\n  [0.00856192, 0.1486192, 0.8586192],\n  [0.00856644, 0.1486644, 0.8586644],\n  [0.00857184, 0.1487184, 0.8587184],\n  [0.0085802, 0.148802, 0.858802],\n  [0.00858752, 0.1488752, 0.8588752],\n  [0.00859616, 0.1489616, 0.8589616],\n  [0.00860584, 0.1490584, 0.8590584],\n  [0.00861948, 0.1491948, 0.8591948],\n  [0.00863172, 0.1493172, 0.8593172],\n  [0.00864508, 0.1494508, 0.8594508],\n  [0.00865968, 0.1495968, 0.8595968],\n  [0.00867968, 0.1497968, 0.8597968],\n  [0.00869708, 0.1499708, 0.8599708],\n  [0.00871576, 0.1501576, 0.8601576],\n  [0.0087358, 0.150358, 0.860358],\n  [0.00876272, 0.1506272, 0.8606272],\n  [0.0087858, 0.150858, 0.860858],\n  [0.00881028, 0.1511028, 0.8611028],\n  [0.0088362, 0.151362, 0.861362],\n  [0.0088706, 0.151706, 0.861706],\n  [0.0088998, 0.151998, 0.861998],\n  [0.00893052, 0.1523052, 0.8623052],\n  [0.00896272, 0.1526272, 0.8626272],\n  [0.00900516, 0.1530516, 0.8630516],\n  [0.00904084, 0.1534084, 0.8634084],\n  [0.00907812, 0.1537812, 0.8637812],\n  [0.00911704, 0.1541704, 0.8641704],\n  [0.00916792, 0.1546792, 0.8646792],\n  [0.00921048, 0.1551048, 0.8651048],\n  [0.00925472, 0.1555472, 0.8655472],\n  [0.00930064, 0.1560064, 0.8660064],\n  [0.00934824, 0.1564824, 0.8664824],\n  [0.0094102, 0.157102, 0.867102],\n  [0.00946168, 0.1576168, 0.8676168],\n  [0.00951496, 0.1581496, 0.8681496],\n  [0.00957, 0.1587, 0.8687],\n  [0.00964128, 0.1594128, 0.8694128],\n  [0.00970036, 0.1600036, 0.8700036],\n  [0.00976128, 0.1606128, 0.8706128],\n  [0.00982404, 0.1612404, 0.8712404],\n  [0.00990508, 0.1620508, 0.8720508],\n  [0.009972, 0.16272, 0.87272],\n  [0.01004084, 0.1634084, 0.8734084],\n  [0.0101296, 0.164296, 0.874296],\n  [0.01020272, 0.1650272, 0.8750272],\n  [0.01027784, 0.1657784, 0.8757784],\n  [0.01035488, 0.1665488, 0.8765488],\n  [0.01045392, 0.1675392, 0.8775392],\n  [0.0105354, 0.168354, 0.878354],\n  [0.01061892, 0.1691892, 0.8791892],\n  [0.0107044, 0.170044, 0.880044],\n  [0.01081412, 0.1711412, 0.8811412],\n  [0.0109042, 0.172042, 0.882042],\n  [0.01099636, 0.1729636, 0.8829636],\n  [0.01109056, 0.1739056, 0.8839056],\n  [0.01121124, 0.1751124, 0.8851124],\n  [0.01131016, 0.1761016, 0.8861016],\n  [0.0114112, 0.177112, 0.887112],\n  [0.01138116, 0.1768116, 0.8868116],\n  [0.01135176, 0.1765176, 0.8865176],\n  [0.01131588, 0.1761588, 0.8861588],\n  [0.01128788, 0.1758788, 0.8858788],\n  [0.01126048, 0.1756048, 0.8856048],\n  [0.01122712, 0.1752712, 0.8852712],\n  [0.01120108, 0.1750108, 0.8850108],\n  [0.01117568, 0.1747568, 0.8847568],\n  [0.01115088, 0.1745088, 0.8845088],\n  [0.01112068, 0.1742068, 0.8842068],\n  [0.0110972, 0.173972, 0.883972],\n  [0.01107428, 0.1737428, 0.8837428],\n  [0.01105196, 0.1735196, 0.8835196],\n  [0.01102488, 0.1732488, 0.8832488],\n  [0.01100384, 0.1730384, 0.8830384],\n  [0.0109834, 0.172834, 0.882834],\n  [0.01096348, 0.1726348, 0.8826348],\n  [0.01094416, 0.1724416, 0.8824416],\n  [0.01092072, 0.1722072, 0.8822072],\n  [0.01090264, 0.1720264, 0.8820264],\n  [0.01088508, 0.1718508, 0.8818508],\n  [0.01086388, 0.1716388, 0.8816388],\n  [0.01084752, 0.1714752, 0.8814752],\n  [0.01083168, 0.1713168, 0.8813168],\n  [0.01081636, 0.1711636, 0.8811636],\n  [0.010798, 0.17098, 0.88098],\n  [0.0107838, 0.170838, 0.880838],\n  [0.01077016, 0.1707016, 0.8807016],\n  [0.010757, 0.17057, 0.88057],\n  [0.01074436, 0.1704436, 0.8804436],\n  [0.01072924, 0.1702924, 0.8802924],\n  [0.01071768, 0.1701768, 0.8801768],\n  [0.01070656, 0.1700656, 0.8800656],\n  [0.010696, 0.16996, 0.87996],\n  [0.01068336, 0.1698336, 0.8798336],\n  [0.01067376, 0.1697376, 0.8797376],\n  [0.01066464, 0.1696464, 0.8796464],\n  [0.010656, 0.16956, 0.87956],\n  [0.01064572, 0.1694572, 0.8794572],\n  [0.01063804, 0.1693804, 0.8793804],\n  [0.01063076, 0.1693076, 0.8793076],\n  [0.01062224, 0.1692224, 0.8792224],\n  [0.01061588, 0.1691588, 0.8791588],\n  [0.01060996, 0.1690996, 0.8790996],\n  [0.0106044, 0.169044, 0.879044],\n  [0.0105992, 0.168992, 0.878992],\n  [0.01059328, 0.1689328, 0.8789328],\n  [0.01058892, 0.1688892, 0.8788892],\n  [0.01058496, 0.1688496, 0.8788496],\n  [0.01058132, 0.1688132, 0.8788132],\n  [0.01057728, 0.1687728, 0.8787728],\n  [0.0105744, 0.168744, 0.878744],\n  [0.01057184, 0.1687184, 0.8787184],\n  [0.01056956, 0.1686956, 0.8786956],\n  [0.01056716, 0.1686716, 0.8786716],\n  [0.01056556, 0.1686556, 0.8786556],\n  [0.0105642, 0.168642, 0.878642],\n  [0.01056284, 0.1686284, 0.8786284],\n  [0.0105618, 0.168618, 0.878618],\n  [0.0105608, 0.168608, 0.878608],\n  [0.01056112, 0.1686112, 0.8786112],\n  [0.01056148, 0.1686148, 0.8786148],\n  [0.01056196, 0.1686196, 0.8786196],\n  [0.0105624, 0.168624, 0.878624],\n  [0.01056296, 0.1686296, 0.8786296],\n  [0.0105636, 0.168636, 0.878636],\n  [0.01056452, 0.1686452, 0.8786452],\n  [0.0105654, 0.168654, 0.878654],\n  [0.0105664, 0.168664, 0.878664],\n  [0.01056748, 0.1686748, 0.8786748],\n  [0.010569, 0.16869, 0.87869],\n  [0.01057036, 0.1687036, 0.8787036],\n  [0.0105718, 0.168718, 0.878718],\n  [0.01057384, 0.1687384, 0.8787384],\n  [0.0105756, 0.168756, 0.878756],\n  [0.01057748, 0.1687748, 0.8787748],\n  [0.01057948, 0.1687948, 0.8787948],\n  [0.01058164, 0.1688164, 0.8788164],\n  [0.01058456, 0.1688456, 0.8788456],\n  [0.010587, 0.16887, 0.87887],\n  [0.01058964, 0.1688964, 0.8788964],\n  [0.0105924, 0.168924, 0.878924],\n  [0.01059604, 0.1689604, 0.8789604],\n  [0.01059916, 0.1689916, 0.8789916],\n  [0.0106024, 0.169024, 0.879024],\n  [0.01060668, 0.1690668, 0.8790668],\n  [0.01061028, 0.1691028, 0.8791028],\n  [0.01061408, 0.1691408, 0.8791408],\n  [0.010618, 0.16918, 0.87918],\n  [0.01062312, 0.1692312, 0.8792312],\n  [0.01062744, 0.1692744, 0.8792744],\n  [0.01063188, 0.1693188, 0.8793188],\n  [0.01063652, 0.1693652, 0.8793652],\n  [0.01064132, 0.1694132, 0.8794132],\n  [0.0106476, 0.169476, 0.879476],\n  [0.0106528, 0.169528, 0.879528],\n  [0.01065816, 0.1695816, 0.8795816],\n  [0.01066372, 0.1696372, 0.8796372],\n  [0.01067092, 0.1697092, 0.8797092],\n  [0.01067688, 0.1697688, 0.8797688],\n  [0.01068304, 0.1698304, 0.8798304],\n  [0.01068936, 0.1698936, 0.8798936],\n  [0.01069756, 0.1699756, 0.8799756],\n  [0.01070428, 0.1700428, 0.8800428],\n  [0.01071124, 0.1701124, 0.8801124],\n  [0.0107184, 0.170184, 0.880184],\n  [0.0107276, 0.170276, 0.880276],\n  [0.0107352, 0.170352, 0.880352],\n  [0.01074296, 0.1704296, 0.8804296],\n  [0.01075092, 0.1705092, 0.8805092],\n  [0.01076116, 0.1706116, 0.8806116],\n  [0.0107696, 0.170696, 0.880696],\n  [0.01077824, 0.1707824, 0.8807824],\n  [0.01078708, 0.1708708, 0.8808708],\n  [0.0107984, 0.170984, 0.880984],\n  [0.01080772, 0.1710772, 0.8810772],\n  [0.0108172, 0.171172, 0.881172],\n  [0.0108294, 0.171294, 0.881294],\n  [0.0108394, 0.171394, 0.881394],\n  [0.0108496, 0.171496, 0.881496],\n  [0.01074856, 0.1704856, 0.8804856],\n  [0.01064964, 0.1694964, 0.8794964],\n  [0.01052896, 0.1682896, 0.8782896],\n  [0.01043476, 0.1673476, 0.8773476],\n  [0.0103426, 0.166426, 0.876426],\n  [0.01025252, 0.1655252, 0.8755252],\n  [0.0101428, 0.164428, 0.874428],\n  [0.01005732, 0.1635732, 0.8735732],\n  [0.0099738, 0.162738, 0.872738],\n  [0.00987228, 0.1617228, 0.8717228],\n  [0.009716, 0.16016, 0.87016],\n  [0.0096412, 0.159412, 0.869412],\n  [0.009568, 0.15868, 0.86868],\n  [0.00947924, 0.1577924, 0.8677924],\n  [0.0094104, 0.157104, 0.867104],\n  [0.00934348, 0.1564348, 0.8664348],\n  [0.0092624, 0.155624, 0.865624],\n  [0.00919968, 0.1549968, 0.8649968],\n  [0.0091388, 0.154388, 0.864388],\n  [0.00907968, 0.1537968, 0.8637968],\n  [0.0090224, 0.153224, 0.863224],\n  [0.00895336, 0.1525336, 0.8625336],\n  [0.00890008, 0.1520008, 0.8620008],\n  [0.0088486, 0.151486, 0.861486],\n  [0.00878664, 0.1508664, 0.8608664],\n  [0.00873904, 0.1503904, 0.8603904],\n  [0.00869312, 0.1499312, 0.8599312],\n  [0.00864888, 0.1494888, 0.8594888],\n  [0.00860632, 0.1490632, 0.8590632],\n  [0.00855544, 0.1485544, 0.8585544],\n  [0.00851652, 0.1481652, 0.8581652],\n  [0.00851652, 0.1481652, 0.8581652],\n  [0.00847924, 0.1477924, 0.8577924],\n  [0.00844356, 0.1474356, 0.8574356],\n  [0.00840112, 0.1470112, 0.8570112],\n  [0.00836888, 0.1466888, 0.8566888],\n  [0.0083382, 0.146382, 0.856382],\n  [0.008309, 0.14609, 0.85609],\n  [0.00827456, 0.1457456, 0.8557456],\n  [0.00824868, 0.1454868, 0.8554868],\n  [0.00822416, 0.1452416, 0.8552416],\n  [0.00819556, 0.1449556, 0.8549556],\n  [0.00817416, 0.1447416, 0.8547416],\n  [0.00815416, 0.1445416, 0.8545416],\n  [0.00813544, 0.1443544, 0.8543544],\n  [0.00811804, 0.1441804, 0.8541804],\n  [0.00809808, 0.1439808, 0.8539808],\n  [0.00808348, 0.1438348, 0.8538348],\n  [0.00807012, 0.1437012, 0.8537012],\n  [0.00805504, 0.1435504, 0.8535504],\n  [0.00804424, 0.1434424, 0.8534424],\n  [0.00803456, 0.1433456, 0.8533456],\n  [0.00802592, 0.1432592, 0.8532592],\n  [0.00801832, 0.1431832, 0.8531832],\n  [0.00801024, 0.1431024, 0.8531024],\n  [0.0080048, 0.143048, 0.853048],\n  [0.00800028, 0.1430028, 0.8530028],\n  [0.00799572, 0.1429572, 0.8529572],\n  [0.00799224, 0.1429224, 0.8529224],\n  [0.0079888, 0.142888, 0.852888],\n  [0.0079898, 0.142898, 0.852898],\n  [0.00799084, 0.1429084, 0.8529084],\n  [0.0079922, 0.142922, 0.852922],\n  [0.0079936, 0.142936, 0.852936],\n  [0.0079952, 0.142952, 0.852952],\n  [0.00799704, 0.1429704, 0.8529704],\n  [0.00799984, 0.1429984, 0.8529984],\n  [0.0080024, 0.143024, 0.853024],\n  [0.00800528, 0.1430528, 0.8530528],\n  [0.00800848, 0.1430848, 0.8530848],\n  [0.00801296, 0.1431296, 0.8531296],\n  [0.00801692, 0.1431692, 0.8531692],\n  [0.00802128, 0.1432128, 0.8532128],\n  [0.0080272, 0.143272, 0.853272],\n  [0.0080324, 0.143324, 0.853324],\n  [0.00803796, 0.1433796, 0.8533796],\n  [0.00804388, 0.1434388, 0.8534388],\n  [0.00805024, 0.1435024, 0.8535024],\n  [0.0080588, 0.143588, 0.853588],\n  [0.00806604, 0.1436604, 0.8536604],\n  [0.00807372, 0.1437372, 0.8537372],\n  [0.008084, 0.14384, 0.85384],\n  [0.00809264, 0.1439264, 0.8539264],\n  [0.00810176, 0.1440176, 0.8540176],\n  [0.00811136, 0.1441136, 0.8541136],\n  [0.008124, 0.14424, 0.85424],\n  [0.0081346, 0.144346, 0.854346],\n  [0.00814568, 0.1444568, 0.8544568],\n  [0.0081572, 0.144572, 0.854572],\n  [0.00817236, 0.1447236, 0.8547236],\n  [0.008185, 0.14485, 0.85485],\n  [0.00819816, 0.1449816, 0.8549816],\n  [0.0082118, 0.145118, 0.855118],\n  [0.008226, 0.14526, 0.85526],\n  [0.0082444, 0.145444, 0.855444],\n  [0.00826, 0.1456, 0.8556],\n  [0.00827552, 0.1457552, 0.8557552],\n  [0.00829188, 0.1459188, 0.8559188],\n  [0.00831308, 0.1461308, 0.8561308],\n  [0.00833064, 0.1463064, 0.8563064],\n  [0.00834872, 0.1464872, 0.8564872],\n  [0.00837212, 0.1467212, 0.8567212],\n  [0.00839148, 0.1469148, 0.8569148],\n  [0.00841136, 0.1471136, 0.8571136],\n  [0.00843184, 0.1473184, 0.8573184],\n  [0.00845288, 0.1475288, 0.8575288],\n  [0.00848, 0.1478, 0.8578],\n  [0.00850228, 0.1480228, 0.8580228],\n  [0.0085252, 0.148252, 0.858252],\n  [0.00855464, 0.1485464, 0.8585464],\n  [0.00857884, 0.1487884, 0.8587884],\n  [0.00860368, 0.1490368, 0.8590368],\n  [0.00862908, 0.1492908, 0.8592908],\n  [0.00866172, 0.1496172, 0.8596172],\n  [0.00868848, 0.1498848, 0.8598848],\n  [0.00871588, 0.1501588, 0.8601588],\n  [0.00874388, 0.1504388, 0.8604388],\n  [0.00877976, 0.1507976, 0.8607976],\n  [0.0088092, 0.151092, 0.861092],\n  [0.0088392, 0.151392, 0.861392],\n  [0.008829, 0.15129, 0.86129],\n  [0.008819, 0.15119, 0.86119],\n  [0.0088068, 0.151068, 0.861068],\n  [0.00879732, 0.1509732, 0.8609732],\n  [0.008788, 0.15088, 0.86088],\n  [0.00877668, 0.1507668, 0.8607668],\n  [0.00876784, 0.1506784, 0.8606784],\n  [0.0087592, 0.150592, 0.860592],\n  [0.0087508, 0.150508, 0.860508],\n  [0.00874256, 0.1504256, 0.8604256],\n  [0.00873256, 0.1503256, 0.8603256],\n  [0.0087248, 0.150248, 0.860248],\n  [0.0087172, 0.150172, 0.860172],\n  [0.008708, 0.15008, 0.86008],\n  [0.00870084, 0.1500084, 0.8600084],\n  [0.00869388, 0.1499388, 0.8599388],\n  [0.00868712, 0.1498712, 0.8598712],\n  [0.00867896, 0.1497896, 0.8597896],\n  [0.00867264, 0.1497264, 0.8597264],\n  [0.00866648, 0.1496648, 0.8596648],\n  [0.00866052, 0.1496052, 0.8596052],\n  [0.00865332, 0.1495332, 0.8595332],\n  [0.00864776, 0.1494776, 0.8594776],\n  [0.0086424, 0.149424, 0.859424],\n  [0.0086372, 0.149372, 0.859372],\n  [0.00863092, 0.1493092, 0.8593092],\n  [0.00862612, 0.1492612, 0.8592612],\n  [0.00862148, 0.1492148, 0.8592148],\n  [0.008617, 0.14917, 0.85917],\n  [0.00861272, 0.1491272, 0.8591272],\n  [0.0086076, 0.149076, 0.859076],\n  [0.00860368, 0.1490368, 0.8590368],\n  [0.00859988, 0.1489988, 0.8589988],\n  [0.00859628, 0.1489628, 0.8589628],\n  [0.008592, 0.14892, 0.85892],\n  [0.00858876, 0.1488876, 0.8588876],\n  [0.00858564, 0.1488564, 0.8588564],\n  [0.00858272, 0.1488272, 0.8588272],\n  [0.00857924, 0.1487924, 0.8587924],\n  [0.0085766, 0.148766, 0.858766],\n  [0.00857416, 0.1487416, 0.8587416],\n  [0.0085718, 0.148718, 0.858718],\n  [0.00856908, 0.1486908, 0.8586908],\n  [0.00856708, 0.1486708, 0.8586708],\n  [0.0085652, 0.148652, 0.858652],\n  [0.008563, 0.14863, 0.85863],\n  [0.0085614, 0.148614, 0.858614],\n  [0.00856, 0.1486, 0.8586],\n  [0.0085586, 0.148586, 0.858586],\n  [0.00855736, 0.1485736, 0.8585736],\n  [0.008556, 0.14856, 0.85856],\n  [0.008555, 0.14855, 0.85855],\n  [0.00855412, 0.1485412, 0.8585412],\n  [0.0085532, 0.148532, 0.858532],\n  [0.00855256, 0.1485256, 0.8585256],\n  [0.008552, 0.14852, 0.85852],\n  [0.00855156, 0.1485156, 0.8585156],\n  [0.00855108, 0.1485108, 0.8585108],\n  [0.00855072, 0.1485072, 0.8585072],\n];\n", "/* eslint-disable @typescript-eslint/naming-convention */\nimport { LAB_to_sRGB, LCH_to_Lab, Lab_to_LCH, sRGB_to_LCH, snap_into_gamut } from './csswg';\nimport { getPointsOnCurvePath } from './geometry';\nimport { CurvedHelixPath, Palette, Vec3 } from './types';\nimport { hueToSnappingPointsMap, hexToHue } from './hueMap';\n// This file contains functions that combine geometry and color math to create\n// and work with palette curves.\n\n/**\n * When distributing output shades along the curve, for each shade\u2019s lightness a\n * logarithmically distributed value is averaged with a linearly distributed\n * value to this degree between zero and one, zero meaning use the logarithmic\n * value, one meaning use the linear value.\n */\nconst defaultLinearity = 0.75;\n\nconst snappingPointsForKeyColor = (keyColor: string): number[] => {\n  const hue = hexToHue(keyColor);\n  const range = [\n    hueToSnappingPointsMap[hue][0] * 100,\n    hueToSnappingPointsMap[hue][1] * 100,\n    hueToSnappingPointsMap[hue][2] * 100,\n  ];\n  return range;\n};\n\nconst pointsForKeyColor = (keyColor: string, range: number[], centerPoint: number): number[] => {\n  const hue = hexToHue(keyColor);\n  const center = hueToSnappingPointsMap[hue][1] * 100;\n  const linear = linearInterpolationThroughPoint(range[0], range[1], center, 16);\n  return linear;\n};\n\nfunction linearInterpolationThroughPoint(start: number, end: number, inBetween: number, numSamples: number) {\n  if (numSamples < 3) {\n    throw new Error('Number of samples must be at least 3.');\n  }\n\n  // Find the ratio of the inBetween point\n  const inBetweenRatio = (inBetween - start) / (end - start);\n\n  // Calculate the index of the inBetween point in the resulting array\n  const inBetweenIndex = Math.floor((numSamples - 1) * inBetweenRatio);\n\n  // Initialize the output array\n  const result = new Array(numSamples);\n\n  // Set start, inBetween and end points in the result array\n  result[0] = start;\n  result[inBetweenIndex] = inBetween;\n  result[numSamples - 1] = end;\n\n  // Calculate the step size for each segment\n  const stepBefore = (inBetween - start) / inBetweenIndex;\n  const stepAfter = (end - inBetween) / (numSamples - 1 - inBetweenIndex);\n\n  // Fill the array with interpolated values before the inBetween point\n  for (let i = 1; i < inBetweenIndex; i++) {\n    result[i] = start + i * stepBefore;\n  }\n\n  // Fill the array with interpolated values after the inBetween point\n  for (let i = inBetweenIndex + 1; i < numSamples - 1; i++) {\n    result[i] = inBetween + (i - inBetweenIndex) * stepAfter;\n  }\n\n  return result;\n}\n\nconst getLogSpace = (min: number, max: number, n: number) => {\n  const a = min <= 0 ? 0 : Math.log(min);\n  const b = Math.log(max);\n  const delta = (b - a) / n;\n\n  const result = [Math.pow(Math.E, a)];\n  for (let i = 1; i < n; i += 1) {\n    result.push(Math.pow(Math.E, a + delta * i));\n  }\n  result.push(Math.pow(Math.E, b));\n  return result;\n};\n\nfunction paletteShadesFromCurvePoints(\n  curvePoints: Vec3[],\n  nShades: number,\n  linearity = defaultLinearity,\n  keyColor: string,\n): Vec3[] {\n  if (curvePoints.length <= 2) {\n    return [];\n  }\n\n  const snappingPoints = snappingPointsForKeyColor(keyColor);\n  const paletteShades = [];\n  const range = [snappingPoints[0], snappingPoints[2]];\n  const logLightness = getLogSpace(Math.log10(0), Math.log10(100), nShades);\n  const linearLightness = pointsForKeyColor(keyColor, range, snappingPoints[1]);\n  let c = 0;\n\n  // obtain 2d path thru color space to grab points from\n  for (let i = 0; i < nShades; i++) {\n    const l = Math.min(\n      range[1],\n      Math.max(range[0], logLightness[i] * (1 - linearity) + linearLightness[i] * linearity),\n    );\n\n    while (l > curvePoints[c + 1][0]) {\n      c++;\n    }\n\n    const [l1, a1, b1] = curvePoints[c];\n    const [l2, a2, b2] = curvePoints[c + 1];\n\n    const u = (l - l1) / (l2 - l1);\n\n    paletteShades[i] = [l1 + (l2 - l1) * u, a1 + (a2 - a1) * u, b1 + (b2 - b1) * u] as Vec3;\n  }\n\n  return paletteShades.map(snap_into_gamut);\n}\n\nexport function paletteShadesFromCurve(\n  keyColor: string,\n  curve: CurvedHelixPath,\n  nShades = 16,\n  linearity = defaultLinearity,\n  curveDepth = 24,\n): Vec3[] {\n  const points = getPointsOnCurvePath(curve, Math.ceil((curveDepth * (1 + Math.abs(curve.torsion || 1))) / 2)).map(\n    (curvePoint: Vec3) => getPointOnHelix(curvePoint, curve.torsion, curve.torsionT0),\n  );\n  return paletteShadesFromCurvePoints(points, nShades, linearity, keyColor);\n}\n\nexport function sRGB_to_hex(rgb: Vec3): string {\n  return `#${rgb\n    .map(x => {\n      const channel = x < 0 ? 0 : Math.floor(x >= 1.0 ? 255 : x * 256);\n      return channel.toString(16).padStart(2, '0');\n    })\n    .join('')}`;\n}\n\nexport function Lab_to_hex(lab: Vec3): string {\n  return sRGB_to_hex(LAB_to_sRGB(lab));\n}\n\nexport function hex_to_sRGB(hex: string): Vec3 {\n  const aRgbHex = hex.match(/#?(..)(..)(..)/);\n  return aRgbHex\n    ? [parseInt(aRgbHex[1], 16) / 255, parseInt(aRgbHex[2], 16) / 255, parseInt(aRgbHex[3], 16) / 255]\n    : [0, 0, 0];\n}\n\nexport function hex_to_LCH(hex: string): Vec3 {\n  return sRGB_to_LCH(hex_to_sRGB(hex));\n}\n\nfunction paletteShadesToHex(paletteShades: Vec3[]): string[] {\n  return paletteShades.map(Lab_to_hex);\n}\n\nfunction getPointOnHelix(pointOnCurve: Vec3, torsion = 0, torsionT0 = 50): Vec3 {\n  const t = pointOnCurve[0];\n  const [l, c, h] = Lab_to_LCH(pointOnCurve);\n  const hueOffset = torsion * (t - torsionT0);\n  return LCH_to_Lab([l, c, h + hueOffset]);\n}\n\n// function getPointOnCurvedHelixPathWithinGamut(curvedHelixPath: CurvedHelixPath, t: number): Vec3 {\n//   return snap_into_gamut(\n//     getPointOnHelix(getPointOnCurvePath(curvedHelixPath, t)!, curvedHelixPath.torsion, curvedHelixPath.torsionT0),\n//   );\n// }\n\nexport function curvePathFromPalette({ keyColor, darkCp, lightCp, hueTorsion }: Palette): CurvedHelixPath {\n  const blackPosition = [0, 0, 0];\n  const whitePosition = [100, 0, 0];\n  const keyColorPosition = LCH_to_Lab(keyColor);\n  const [l, a, b] = keyColorPosition;\n\n  const darkControlPosition = [l * (1 - darkCp), a, b];\n  const lightControlPosition = [l + (100 - l) * lightCp, a, b];\n\n  return {\n    curves: [\n      { points: [blackPosition, darkControlPosition, keyColorPosition] },\n      { points: [keyColorPosition, lightControlPosition, whitePosition] },\n    ],\n    torsion: hueTorsion,\n    torsionT0: l,\n  } as CurvedHelixPath;\n}\n\nexport function hexColorsFromPalette(\n  keyColor: string,\n  palette: Palette,\n  nShades = 16,\n  linearity = defaultLinearity,\n  curveDepth = 24,\n): string[] {\n  const curve = curvePathFromPalette(palette);\n  const shades = paletteShadesFromCurve(keyColor, curve, nShades, linearity, curveDepth);\n  return paletteShadesToHex(shades);\n}\n", "import { BrandVariants }  from '@fluentui/tokens';\r\nimport { Palette, hexColorsFromPalette, hex_to_LCH } from './colors';\r\n\r\n\r\n\r\ntype Options = {\r\n    darkCp?: number;\r\n    lightCp?: number;\r\n    hueTorsion?: number;\r\n};\r\n\r\n/**\r\n * A palette is represented as a continuous curve through LAB space, made of two quadratic bezier curves that start at\r\n * 0L (black) and 100L (white) and meet at the LAB value of the provided key color.\r\n *\r\n * This function takes in a palette as input, which consists of:\r\n * keyColor:        The primary color in the LCH (Lightness Chroma Hue) color space\r\n * darkCp, lightCp: The control point of the quadratic beizer curve towards black and white, respectively (between 0-1).\r\n *                  Higher values move the control point toward the ends of the gamut causing chroma/saturation to\r\n *                  diminish more slowly near the key color, and lower values move the control point toward the key\r\n *                  color causing chroma/saturation to diminish more linearly.\r\n * hueTorsion:      Enables the palette to move through different hues by rotating the curve\uFFFDs points in LAB space,\r\n *                  creating a helical curve\r\n\r\n * The function returns a set of brand tokens.\r\n */\r\nexport function getBrandTokensFromPalette(keyColor: string, options: Options = {}) {\r\n    const { darkCp = 2 / 3, lightCp = 1 / 3, hueTorsion = 0 } = options;\r\n    const brandPalette: Palette = {\r\n        keyColor: hex_to_LCH(keyColor),\r\n        darkCp,\r\n        lightCp,\r\n        hueTorsion,\r\n    };\r\n    const hexColors = hexColorsFromPalette(keyColor, brandPalette, 16, 1);\r\n    return hexColors.reduce((acc: Record<string, string>, hexColor, h) => {\r\n        acc[`${(h + 1) * 10}`] = hexColor;\r\n        return acc;\r\n    }, {}) as BrandVariants;\r\n}"],
  "mappings": "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",
  "names": []
}
